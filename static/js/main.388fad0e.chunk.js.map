{"version":3,"sources":["components/card/card.component.jsx","components/cardlist/cardlist.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","monoster","id","name","email","className","src","alt","CardList","useState","value","setValue","monosters","filter","toLowerCase","includes","map","key","for","type","onChange","e","target","class","App","state","monsters","fetch","then","res","json","data","setState","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"qUAceA,G,YAXF,SAACC,GAAW,IAAD,EACKA,EAAMC,SAA1BC,EADe,EACfA,GAAIC,EADW,EACXA,KAAMC,EADK,EACLA,MAClB,OACC,yBAAKC,UAAU,QACd,yBAAKC,IAAG,+BAA0BJ,EAA1B,QAAoCK,IAAKL,IACjD,4BAAKC,GACL,4BAAKC,MCeOI,EAnBE,SAACR,GAAW,IAAD,EACCS,mBAAS,IADV,mBACnBC,EADmB,KACZC,EADY,KAMrBC,EADkBZ,EAAMY,UAAUC,QAAO,SAACZ,GAAD,OAAcA,EAASE,KAAKW,cAAcC,SAASL,MAChEM,KAAI,SAACf,GAAD,OAAc,kBAAC,EAAD,CAAMgB,IAAKhB,EAASC,GAAID,SAAUA,OACtF,OACC,yBAAKI,UAAU,YACd,yBAAKA,UAAU,mBACd,2BAAOa,IAAI,QAAX,uBACA,2BAAOC,KAAK,OAAOhB,KAAK,OAAOD,GAAG,OAAOQ,MAAOA,EAAOU,SATrC,SAACC,GACrBV,EAASU,EAAEC,OAAOZ,MAAMI,mBAWvB,yBAAKS,MAAM,QAAQX,KCmBPY,G,wDAhCd,WAAYxB,GAAQ,IAAD,8BAClB,cAAMA,IACDyB,MAAQ,CACZC,SAAU,IAHO,E,gEAQE,IAAD,OACnBC,MAAM,kFACJC,MAAK,SAACC,GAAD,OAELA,EAAIC,UAEJF,MAAK,SAACG,GACN,EAAKC,SAAS,CAAEN,SAAUK,OAE1BE,OAAM,SAACC,GACPC,QAAQC,IAAIF,Q,+BAKd,OACC,6BACC,wBAAI7B,UAAU,SAAd,qBACA,kBAAC,EAAD,CAAUO,UAAWyB,KAAKZ,MAAMC,gB,GA3BlBY,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.388fad0e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = (props) => {\r\n\tconst { id, name, email } = props.monoster;\r\n\treturn (\r\n\t\t<div className=\"Card\">\r\n\t\t\t<img src={`https://robohash.org/${id}.png`} alt={id} />\r\n\t\t\t<h4>{name}</h4>\r\n\t\t\t<h5>{email}</h5>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState } from 'react';\r\nimport './cardlist.styles.css';\r\n\r\nimport Card from '../card/card.component';\r\n\r\nconst CardList = (props) => {\r\n\tconst [ value, setValue ] = useState('');\r\n\tconst handleChange = (e) => {\r\n\t\tsetValue(e.target.value.toLowerCase());\r\n\t};\r\n\tconst filterMonosters = props.monosters.filter((monoster) => monoster.name.toLowerCase().includes(value));\r\n\tconst monosters = filterMonosters.map((monoster) => <Card key={monoster.id} monoster={monoster} />);\r\n\treturn (\r\n\t\t<div className=\"CardList\">\r\n\t\t\t<div className=\"input-container\">\r\n\t\t\t\t<label for=\"name\">Enter monoster Name</label>\r\n\t\t\t\t<input type=\"text\" name=\"name\" id=\"name\" value={value} onChange={handleChange} />\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class=\"list\">{monosters}</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from 'react';\nimport CardList from './components/cardlist/cardlist.component';\n\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tmonsters: []\n\t\t};\n\t}\n\n\t// loading data from the external api or server\n\tcomponentDidMount() {\n\t\tfetch('https://cors-anywhere.herokuapp.com/https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((res) =>\n\t\t\t\t// this.setState({monsters: })\n\t\t\t\tres.json()\n\t\t\t)\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({ monsters: data });\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1 className=\"title\">Monosters Rolodex</h1>\n\t\t\t\t<CardList monosters={this.state.monsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}